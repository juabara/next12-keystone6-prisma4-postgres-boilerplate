# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type PrizePool {
  id: ID!
  prizePoolNumber: Int
  numOfTickets: Int
  initialTicketValue: Float
  currentTicketValue: Float
  ticketRangeBegin: Int
  ticketRangeEnd: Int
  remainingTickets: Int
  createdTime: DateTime
  nextHalveTime: DateTime
  secretNumber: Int
  status: String
  halves(
    where: HalveWhereInput! = {}
    orderBy: [HalveOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Halve!]
  halvesCount(where: HalveWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PrizePoolWhereUniqueInput {
  id: ID
  prizePoolNumber: Int
}

input PrizePoolWhereInput {
  AND: [PrizePoolWhereInput!]
  OR: [PrizePoolWhereInput!]
  NOT: [PrizePoolWhereInput!]
  id: IDFilter
  prizePoolNumber: IntFilter
  numOfTickets: IntFilter
  initialTicketValue: FloatFilter
  currentTicketValue: FloatFilter
  ticketRangeBegin: IntFilter
  ticketRangeEnd: IntFilter
  remainingTickets: IntFilter
  createdTime: DateTimeFilter
  nextHalveTime: DateTimeFilter
  secretNumber: IntFilter
  status: StringFilter
  halves: HalveManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input HalveManyRelationFilter {
  every: HalveWhereInput
  some: HalveWhereInput
  none: HalveWhereInput
}

input PrizePoolOrderByInput {
  id: OrderDirection
  prizePoolNumber: OrderDirection
  numOfTickets: OrderDirection
  initialTicketValue: OrderDirection
  currentTicketValue: OrderDirection
  ticketRangeBegin: OrderDirection
  ticketRangeEnd: OrderDirection
  remainingTickets: OrderDirection
  createdTime: OrderDirection
  nextHalveTime: OrderDirection
  secretNumber: OrderDirection
  status: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PrizePoolUpdateInput {
  prizePoolNumber: Int
  numOfTickets: Int
  initialTicketValue: Float
  currentTicketValue: Float
  ticketRangeBegin: Int
  ticketRangeEnd: Int
  remainingTickets: Int
  createdTime: DateTime
  nextHalveTime: DateTime
  secretNumber: Int
  status: String
  halves: HalveRelateToManyForUpdateInput
}

input HalveRelateToManyForUpdateInput {
  disconnect: [HalveWhereUniqueInput!]
  set: [HalveWhereUniqueInput!]
  create: [HalveCreateInput!]
  connect: [HalveWhereUniqueInput!]
}

input PrizePoolUpdateArgs {
  where: PrizePoolWhereUniqueInput!
  data: PrizePoolUpdateInput!
}

input PrizePoolCreateInput {
  prizePoolNumber: Int
  numOfTickets: Int!
  initialTicketValue: Float!
  currentTicketValue: Float
  ticketRangeBegin: Int
  ticketRangeEnd: Int
  remainingTickets: Int
  createdTime: DateTime
  nextHalveTime: DateTime
  secretNumber: Int
  status: String
  halves: HalveRelateToManyForCreateInput
}

input HalveRelateToManyForCreateInput {
  create: [HalveCreateInput!]
  connect: [HalveWhereUniqueInput!]
}

type Halve {
  id: ID!
  newTicketRangeBegin: Int
  newTicketRangeEnd: Int
  ticketValue: Float
  remainingTickets: Int
  halveDateTime: DateTime
  prizePool: PrizePool
}

input HalveWhereUniqueInput {
  id: ID
}

input HalveWhereInput {
  AND: [HalveWhereInput!]
  OR: [HalveWhereInput!]
  NOT: [HalveWhereInput!]
  id: IDFilter
  newTicketRangeBegin: IntNullableFilter
  newTicketRangeEnd: IntNullableFilter
  ticketValue: FloatNullableFilter
  remainingTickets: IntNullableFilter
  halveDateTime: DateTimeNullableFilter
  prizePool: PrizePoolWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input HalveOrderByInput {
  id: OrderDirection
  newTicketRangeBegin: OrderDirection
  newTicketRangeEnd: OrderDirection
  ticketValue: OrderDirection
  remainingTickets: OrderDirection
  halveDateTime: OrderDirection
}

input HalveUpdateInput {
  newTicketRangeBegin: Int
  newTicketRangeEnd: Int
  ticketValue: Float
  remainingTickets: Int
  halveDateTime: DateTime
  prizePool: PrizePoolRelateToOneForUpdateInput
}

input PrizePoolRelateToOneForUpdateInput {
  create: PrizePoolCreateInput
  connect: PrizePoolWhereUniqueInput
  disconnect: Boolean
}

input HalveUpdateArgs {
  where: HalveWhereUniqueInput!
  data: HalveUpdateInput!
}

input HalveCreateInput {
  newTicketRangeBegin: Int
  newTicketRangeEnd: Int
  ticketValue: Float
  remainingTickets: Int
  halveDateTime: DateTime
  prizePool: PrizePoolRelateToOneForCreateInput
}

input PrizePoolRelateToOneForCreateInput {
  create: PrizePoolCreateInput
  connect: PrizePoolWhereUniqueInput
}

type User {
  id: ID!
  name: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  name: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input UserUpdateInput {
  name: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  password: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createPrizePool(data: PrizePoolCreateInput!): PrizePool
  createPrizePools(data: [PrizePoolCreateInput!]!): [PrizePool]
  updatePrizePool(
    where: PrizePoolWhereUniqueInput!
    data: PrizePoolUpdateInput!
  ): PrizePool
  updatePrizePools(data: [PrizePoolUpdateArgs!]!): [PrizePool]
  deletePrizePool(where: PrizePoolWhereUniqueInput!): PrizePool
  deletePrizePools(where: [PrizePoolWhereUniqueInput!]!): [PrizePool]
  createHalve(data: HalveCreateInput!): Halve
  createHalves(data: [HalveCreateInput!]!): [Halve]
  updateHalve(where: HalveWhereUniqueInput!, data: HalveUpdateInput!): Halve
  updateHalves(data: [HalveUpdateArgs!]!): [Halve]
  deleteHalve(where: HalveWhereUniqueInput!): Halve
  deleteHalves(where: [HalveWhereUniqueInput!]!): [Halve]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    name: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  password: String
}

type Query {
  prizePools(
    where: PrizePoolWhereInput! = {}
    orderBy: [PrizePoolOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PrizePool!]
  prizePool(where: PrizePoolWhereUniqueInput!): PrizePool
  prizePoolsCount(where: PrizePoolWhereInput! = {}): Int
  halves(
    where: HalveWhereInput! = {}
    orderBy: [HalveOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Halve!]
  halve(where: HalveWhereUniqueInput!): Halve
  halvesCount(where: HalveWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
